/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type AuctionStruct = {
  startTime: PromiseOrValue<BigNumberish>;
  proposer: PromiseOrValue<string>;
  state: PromiseOrValue<BigNumberish>;
  raePrice: PromiseOrValue<BigNumberish>;
  ethBalance: PromiseOrValue<BigNumberish>;
  raeBalance: PromiseOrValue<BigNumberish>;
  totalSupply: PromiseOrValue<BigNumberish>;
};

export type AuctionStructOutput = [
  BigNumber,
  string,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  startTime: BigNumber;
  proposer: string;
  state: number;
  raePrice: BigNumber;
  ethBalance: BigNumber;
  raeBalance: BigNumber;
  totalSupply: BigNumber;
};

export type PermissionStruct = {
  module: PromiseOrValue<string>;
  target: PromiseOrValue<string>;
  selector: PromiseOrValue<BytesLike>;
};

export type PermissionStructOutput = [string, string, string] & {
  module: string;
  target: string;
  selector: string;
};

export interface OptimisticBidInterface extends utils.Interface {
  functions: {
    "REJECTION_PERIOD()": FunctionFragment;
    "WETH_ADDRESS()": FunctionFragment;
    "batchWithdrawERC1155(address,address,address,uint256[],uint256[],bytes32[])": FunctionFragment;
    "buy(address,uint256)": FunctionFragment;
    "buyoutInfo(address,uint256)": FunctionFragment;
    "cash(address,bytes32[])": FunctionFragment;
    "currentAuctionId(address)": FunctionFragment;
    "end(address,bytes32[])": FunctionFragment;
    "feeReceiver()": FunctionFragment;
    "getLeaves()": FunctionFragment;
    "getPermissions()": FunctionFragment;
    "getUnhashedLeaves()": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "redeem(address,bytes32[])": FunctionFragment;
    "registry()": FunctionFragment;
    "start(address,uint256)": FunctionFragment;
    "supply()": FunctionFragment;
    "transfer()": FunctionFragment;
    "updatefeeReceiver(address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawERC1155(address,address,address,uint256,uint256,bytes32[])": FunctionFragment;
    "withdrawERC20(address,address,address,uint256,bytes32[])": FunctionFragment;
    "withdrawERC721(address,address,address,uint256,bytes32[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "REJECTION_PERIOD"
      | "WETH_ADDRESS"
      | "batchWithdrawERC1155"
      | "buy"
      | "buyoutInfo"
      | "cash"
      | "currentAuctionId"
      | "end"
      | "feeReceiver"
      | "getLeaves"
      | "getPermissions"
      | "getUnhashedLeaves"
      | "multicall"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "redeem"
      | "registry"
      | "start"
      | "supply"
      | "transfer"
      | "updatefeeReceiver"
      | "withdraw"
      | "withdrawERC1155"
      | "withdrawERC20"
      | "withdrawERC721"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "REJECTION_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WETH_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchWithdrawERC1155",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyoutInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cash",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "currentAuctionId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "end",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "feeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getLeaves", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPermissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnhashedLeaves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "start",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "supply", values?: undefined): string;
  encodeFunctionData(functionFragment: "transfer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatefeeReceiver",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC1155",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "REJECTION_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WETH_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchWithdrawERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyoutInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentAuctionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "end", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLeaves", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnhashedLeaves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatefeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721",
    data: BytesLike
  ): Result;

  events: {
    "BuyRaes(address,address,uint256,uint256)": EventFragment;
    "Cash(address,address,uint256,uint256)": EventFragment;
    "End(address,uint8,address,uint256)": EventFragment;
    "Redeem(address,address)": EventFragment;
    "Start(address,address,uint256,uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyRaes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "End"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Start"): EventFragment;
}

export interface BuyRaesEventObject {
  _vault: string;
  _buyer: string;
  _auctionId: BigNumber;
  _amount: BigNumber;
}
export type BuyRaesEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  BuyRaesEventObject
>;

export type BuyRaesEventFilter = TypedEventFilter<BuyRaesEvent>;

export interface CashEventObject {
  _vault: string;
  _casher: string;
  _raes: BigNumber;
  _amount: BigNumber;
}
export type CashEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  CashEventObject
>;

export type CashEventFilter = TypedEventFilter<CashEvent>;

export interface EndEventObject {
  _vault: string;
  _state: number;
  _proposer: string;
  _auctionId: BigNumber;
}
export type EndEvent = TypedEvent<
  [string, number, string, BigNumber],
  EndEventObject
>;

export type EndEventFilter = TypedEventFilter<EndEvent>;

export interface RedeemEventObject {
  _vault: string;
  _redeemer: string;
}
export type RedeemEvent = TypedEvent<[string, string], RedeemEventObject>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface StartEventObject {
  _vault: string;
  _proposer: string;
  _auctionId: BigNumber;
  _buyoutPrice: BigNumber;
  _auction: AuctionStructOutput;
}
export type StartEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, AuctionStructOutput],
  StartEventObject
>;

export type StartEventFilter = TypedEventFilter<StartEvent>;

export interface OptimisticBid extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptimisticBidInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    REJECTION_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    WETH_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    batchWithdrawERC1155(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _values: PromiseOrValue<BigNumberish>[],
      _erc1155BatchTransferProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buy(
      _vault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyoutInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        startTime: BigNumber;
        proposer: string;
        state: number;
        raePrice: BigNumber;
        ethBalance: BigNumber;
        raeBalance: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    cash(
      _vault: PromiseOrValue<string>,
      _burnProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentAuctionId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    end(
      _vault: PromiseOrValue<string>,
      _burnProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeReceiver(overrides?: CallOverrides): Promise<[string]>;

    getLeaves(
      overrides?: CallOverrides
    ): Promise<[string[]] & { leaves: string[] }>;

    getPermissions(
      overrides?: CallOverrides
    ): Promise<
      [PermissionStructOutput[]] & { permissions: PermissionStructOutput[] }
    >;

    getUnhashedLeaves(
      overrides?: CallOverrides
    ): Promise<[string[]] & { leaves: string[] }>;

    multicall(
      _data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeem(
      _vault: PromiseOrValue<string>,
      _burnProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    start(
      _vault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supply(overrides?: CallOverrides): Promise<[string]>;

    transfer(overrides?: CallOverrides): Promise<[string]>;

    updatefeeReceiver(
      _new: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _vault: PromiseOrValue<string>,
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC1155(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _erc1155TransferProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _erc20TransferProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC721(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _erc721TransferProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  REJECTION_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  WETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

  batchWithdrawERC1155(
    _vault: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _ids: PromiseOrValue<BigNumberish>[],
    _values: PromiseOrValue<BigNumberish>[],
    _erc1155BatchTransferProof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buy(
    _vault: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyoutInfo(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      startTime: BigNumber;
      proposer: string;
      state: number;
      raePrice: BigNumber;
      ethBalance: BigNumber;
      raeBalance: BigNumber;
      totalSupply: BigNumber;
    }
  >;

  cash(
    _vault: PromiseOrValue<string>,
    _burnProof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentAuctionId(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  end(
    _vault: PromiseOrValue<string>,
    _burnProof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeReceiver(overrides?: CallOverrides): Promise<string>;

  getLeaves(overrides?: CallOverrides): Promise<string[]>;

  getPermissions(overrides?: CallOverrides): Promise<PermissionStructOutput[]>;

  getUnhashedLeaves(overrides?: CallOverrides): Promise<string[]>;

  multicall(
    _data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>[],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeem(
    _vault: PromiseOrValue<string>,
    _burnProof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  start(
    _vault: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supply(overrides?: CallOverrides): Promise<string>;

  transfer(overrides?: CallOverrides): Promise<string>;

  updatefeeReceiver(
    _new: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _vault: PromiseOrValue<string>,
    _auctionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC1155(
    _vault: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    _erc1155TransferProof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    _vault: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _erc20TransferProof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC721(
    _vault: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _erc721TransferProof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    REJECTION_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

    batchWithdrawERC1155(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _values: PromiseOrValue<BigNumberish>[],
      _erc1155BatchTransferProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    buy(
      _vault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyoutInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        startTime: BigNumber;
        proposer: string;
        state: number;
        raePrice: BigNumber;
        ethBalance: BigNumber;
        raeBalance: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    cash(
      _vault: PromiseOrValue<string>,
      _burnProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    currentAuctionId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    end(
      _vault: PromiseOrValue<string>,
      _burnProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    feeReceiver(overrides?: CallOverrides): Promise<string>;

    getLeaves(overrides?: CallOverrides): Promise<string[]>;

    getPermissions(
      overrides?: CallOverrides
    ): Promise<PermissionStructOutput[]>;

    getUnhashedLeaves(overrides?: CallOverrides): Promise<string[]>;

    multicall(
      _data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    redeem(
      _vault: PromiseOrValue<string>,
      _burnProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    registry(overrides?: CallOverrides): Promise<string>;

    start(
      _vault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supply(overrides?: CallOverrides): Promise<string>;

    transfer(overrides?: CallOverrides): Promise<string>;

    updatefeeReceiver(
      _new: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _vault: PromiseOrValue<string>,
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC1155(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _erc1155TransferProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _erc20TransferProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC721(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _erc721TransferProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BuyRaes(address,address,uint256,uint256)"(
      _vault?: PromiseOrValue<string> | null,
      _buyer?: PromiseOrValue<string> | null,
      _auctionId?: PromiseOrValue<BigNumberish> | null,
      _amount?: null
    ): BuyRaesEventFilter;
    BuyRaes(
      _vault?: PromiseOrValue<string> | null,
      _buyer?: PromiseOrValue<string> | null,
      _auctionId?: PromiseOrValue<BigNumberish> | null,
      _amount?: null
    ): BuyRaesEventFilter;

    "Cash(address,address,uint256,uint256)"(
      _vault?: PromiseOrValue<string> | null,
      _casher?: PromiseOrValue<string> | null,
      _raes?: null,
      _amount?: null
    ): CashEventFilter;
    Cash(
      _vault?: PromiseOrValue<string> | null,
      _casher?: PromiseOrValue<string> | null,
      _raes?: null,
      _amount?: null
    ): CashEventFilter;

    "End(address,uint8,address,uint256)"(
      _vault?: PromiseOrValue<string> | null,
      _state?: null,
      _proposer?: PromiseOrValue<string> | null,
      _auctionId?: PromiseOrValue<BigNumberish> | null
    ): EndEventFilter;
    End(
      _vault?: PromiseOrValue<string> | null,
      _state?: null,
      _proposer?: PromiseOrValue<string> | null,
      _auctionId?: PromiseOrValue<BigNumberish> | null
    ): EndEventFilter;

    "Redeem(address,address)"(
      _vault?: PromiseOrValue<string> | null,
      _redeemer?: PromiseOrValue<string> | null
    ): RedeemEventFilter;
    Redeem(
      _vault?: PromiseOrValue<string> | null,
      _redeemer?: PromiseOrValue<string> | null
    ): RedeemEventFilter;

    "Start(address,address,uint256,uint256,tuple)"(
      _vault?: PromiseOrValue<string> | null,
      _proposer?: PromiseOrValue<string> | null,
      _auctionId?: PromiseOrValue<BigNumberish> | null,
      _buyoutPrice?: null,
      _auction?: null
    ): StartEventFilter;
    Start(
      _vault?: PromiseOrValue<string> | null,
      _proposer?: PromiseOrValue<string> | null,
      _auctionId?: PromiseOrValue<BigNumberish> | null,
      _buyoutPrice?: null,
      _auction?: null
    ): StartEventFilter;
  };

  estimateGas: {
    REJECTION_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    batchWithdrawERC1155(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _values: PromiseOrValue<BigNumberish>[],
      _erc1155BatchTransferProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buy(
      _vault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyoutInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cash(
      _vault: PromiseOrValue<string>,
      _burnProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentAuctionId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    end(
      _vault: PromiseOrValue<string>,
      _burnProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    getLeaves(overrides?: CallOverrides): Promise<BigNumber>;

    getPermissions(overrides?: CallOverrides): Promise<BigNumber>;

    getUnhashedLeaves(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      _data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeem(
      _vault: PromiseOrValue<string>,
      _burnProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    start(
      _vault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(overrides?: CallOverrides): Promise<BigNumber>;

    updatefeeReceiver(
      _new: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _vault: PromiseOrValue<string>,
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC1155(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _erc1155TransferProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _erc20TransferProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC721(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _erc721TransferProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    REJECTION_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchWithdrawERC1155(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _values: PromiseOrValue<BigNumberish>[],
      _erc1155BatchTransferProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buy(
      _vault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyoutInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cash(
      _vault: PromiseOrValue<string>,
      _burnProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentAuctionId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    end(
      _vault: PromiseOrValue<string>,
      _burnProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLeaves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPermissions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnhashedLeaves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      _data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      _vault: PromiseOrValue<string>,
      _burnProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start(
      _vault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatefeeReceiver(
      _new: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _vault: PromiseOrValue<string>,
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC1155(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _erc1155TransferProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _erc20TransferProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC721(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _erc721TransferProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
