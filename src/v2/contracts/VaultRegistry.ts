/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type InitInfoStruct = {
  target: PromiseOrValue<string>;
  data: PromiseOrValue<BytesLike>;
  proof: PromiseOrValue<BytesLike>[];
};

export type InitInfoStructOutput = [string, string, string[]] & {
  target: string;
  data: string;
  proof: string[];
};

export interface VaultRegistryInterface extends utils.Interface {
  functions: {
    "burn(address,uint256)": FunctionFragment;
    "create(bytes32,address[],bytes4[])": FunctionFragment;
    "create(bytes32,address[],bytes4[],(address,bytes,bytes32[])[])": FunctionFragment;
    "createCollection(bytes32,address[],bytes4[],(address,bytes,bytes32[])[])": FunctionFragment;
    "createCollectionFor(bytes32,address,address[],bytes4[],(address,bytes,bytes32[])[])": FunctionFragment;
    "createFor(bytes32,address,address[],bytes4[],(address,bytes,bytes32[])[])": FunctionFragment;
    "createFor(bytes32,address,address[],bytes4[])": FunctionFragment;
    "createInCollection(bytes32,address,address[],bytes4[],(address,bytes,bytes32[])[])": FunctionFragment;
    "fNFT()": FunctionFragment;
    "fNFTImplementation()": FunctionFragment;
    "factory()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "nextId(address)": FunctionFragment;
    "totalSupply(address)": FunctionFragment;
    "uri(address)": FunctionFragment;
    "vaultToToken(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "burn"
      | "create(bytes32,address[],bytes4[])"
      | "create(bytes32,address[],bytes4[],(address,bytes,bytes32[])[])"
      | "createCollection"
      | "createCollectionFor"
      | "createFor(bytes32,address,address[],bytes4[],(address,bytes,bytes32[])[])"
      | "createFor(bytes32,address,address[],bytes4[])"
      | "createInCollection"
      | "fNFT"
      | "fNFTImplementation"
      | "factory"
      | "mint"
      | "nextId"
      | "totalSupply"
      | "uri"
      | "vaultToToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "create(bytes32,address[],bytes4[])",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "create(bytes32,address[],bytes4[],(address,bytes,bytes32[])[])",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      InitInfoStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createCollection",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      InitInfoStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createCollectionFor",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      InitInfoStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createFor(bytes32,address,address[],bytes4[],(address,bytes,bytes32[])[])",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      InitInfoStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createFor(bytes32,address,address[],bytes4[])",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createInCollection",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      InitInfoStruct[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "fNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fNFTImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nextId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uri",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultToToken",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "create(bytes32,address[],bytes4[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create(bytes32,address[],bytes4[],(address,bytes,bytes32[])[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCollectionFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFor(bytes32,address,address[],bytes4[],(address,bytes,bytes32[])[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFor(bytes32,address,address[],bytes4[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createInCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fNFTImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultToToken",
    data: BytesLike
  ): Result;

  events: {
    "VaultDeployed(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VaultDeployed"): EventFragment;
}

export interface VaultDeployedEventObject {
  _vault: string;
  _token: string;
  _id: BigNumber;
}
export type VaultDeployedEvent = TypedEvent<
  [string, string, BigNumber],
  VaultDeployedEventObject
>;

export type VaultDeployedEventFilter = TypedEventFilter<VaultDeployedEvent>;

export interface VaultRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    burn(
      _from: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "create(bytes32,address[],bytes4[])"(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "create(bytes32,address[],bytes4[],(address,bytes,bytes32[])[])"(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _calls: InitInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createCollection(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _calls: InitInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createCollectionFor(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _controller: PromiseOrValue<string>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _calls: InitInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createFor(bytes32,address,address[],bytes4[],(address,bytes,bytes32[])[])"(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _calls: InitInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createFor(bytes32,address,address[],bytes4[])"(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createInCollection(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _token: PromiseOrValue<string>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _calls: InitInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fNFT(overrides?: CallOverrides): Promise<[string]>;

    fNFTImplementation(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    mint(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nextId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSupply(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uri(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    vaultToToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { token: string; id: BigNumber }>;
  };

  burn(
    _from: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "create(bytes32,address[],bytes4[])"(
    _merkleRoot: PromiseOrValue<BytesLike>,
    _plugins: PromiseOrValue<string>[],
    _selectors: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "create(bytes32,address[],bytes4[],(address,bytes,bytes32[])[])"(
    _merkleRoot: PromiseOrValue<BytesLike>,
    _plugins: PromiseOrValue<string>[],
    _selectors: PromiseOrValue<BytesLike>[],
    _calls: InitInfoStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createCollection(
    _merkleRoot: PromiseOrValue<BytesLike>,
    _plugins: PromiseOrValue<string>[],
    _selectors: PromiseOrValue<BytesLike>[],
    _calls: InitInfoStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createCollectionFor(
    _merkleRoot: PromiseOrValue<BytesLike>,
    _controller: PromiseOrValue<string>,
    _plugins: PromiseOrValue<string>[],
    _selectors: PromiseOrValue<BytesLike>[],
    _calls: InitInfoStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createFor(bytes32,address,address[],bytes4[],(address,bytes,bytes32[])[])"(
    _merkleRoot: PromiseOrValue<BytesLike>,
    _owner: PromiseOrValue<string>,
    _plugins: PromiseOrValue<string>[],
    _selectors: PromiseOrValue<BytesLike>[],
    _calls: InitInfoStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createFor(bytes32,address,address[],bytes4[])"(
    _merkleRoot: PromiseOrValue<BytesLike>,
    _owner: PromiseOrValue<string>,
    _plugins: PromiseOrValue<string>[],
    _selectors: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createInCollection(
    _merkleRoot: PromiseOrValue<BytesLike>,
    _token: PromiseOrValue<string>,
    _plugins: PromiseOrValue<string>[],
    _selectors: PromiseOrValue<BytesLike>[],
    _calls: InitInfoStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fNFT(overrides?: CallOverrides): Promise<string>;

  fNFTImplementation(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  mint(
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nextId(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupply(
    _vault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uri(
    _vault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  vaultToToken(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { token: string; id: BigNumber }>;

  callStatic: {
    burn(
      _from: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "create(bytes32,address[],bytes4[])"(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string>;

    "create(bytes32,address[],bytes4[],(address,bytes,bytes32[])[])"(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _calls: InitInfoStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    createCollection(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _calls: InitInfoStruct[],
      overrides?: CallOverrides
    ): Promise<[string, string] & { vault: string; token: string }>;

    createCollectionFor(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _controller: PromiseOrValue<string>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _calls: InitInfoStruct[],
      overrides?: CallOverrides
    ): Promise<[string, string] & { vault: string; token: string }>;

    "createFor(bytes32,address,address[],bytes4[],(address,bytes,bytes32[])[])"(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _calls: InitInfoStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    "createFor(bytes32,address,address[],bytes4[])"(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string>;

    createInCollection(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _token: PromiseOrValue<string>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _calls: InitInfoStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    fNFT(overrides?: CallOverrides): Promise<string>;

    fNFTImplementation(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    mint(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    nextId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uri(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    vaultToToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { token: string; id: BigNumber }>;
  };

  filters: {
    "VaultDeployed(address,address,uint256)"(
      _vault?: PromiseOrValue<string> | null,
      _token?: PromiseOrValue<string> | null,
      _id?: PromiseOrValue<BigNumberish> | null
    ): VaultDeployedEventFilter;
    VaultDeployed(
      _vault?: PromiseOrValue<string> | null,
      _token?: PromiseOrValue<string> | null,
      _id?: PromiseOrValue<BigNumberish> | null
    ): VaultDeployedEventFilter;
  };

  estimateGas: {
    burn(
      _from: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "create(bytes32,address[],bytes4[])"(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "create(bytes32,address[],bytes4[],(address,bytes,bytes32[])[])"(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _calls: InitInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createCollection(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _calls: InitInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createCollectionFor(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _controller: PromiseOrValue<string>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _calls: InitInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createFor(bytes32,address,address[],bytes4[],(address,bytes,bytes32[])[])"(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _calls: InitInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createFor(bytes32,address,address[],bytes4[])"(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createInCollection(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _token: PromiseOrValue<string>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _calls: InitInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fNFT(overrides?: CallOverrides): Promise<BigNumber>;

    fNFTImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nextId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uri(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultToToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burn(
      _from: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "create(bytes32,address[],bytes4[])"(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "create(bytes32,address[],bytes4[],(address,bytes,bytes32[])[])"(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _calls: InitInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createCollection(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _calls: InitInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createCollectionFor(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _controller: PromiseOrValue<string>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _calls: InitInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createFor(bytes32,address,address[],bytes4[],(address,bytes,bytes32[])[])"(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _calls: InitInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createFor(bytes32,address,address[],bytes4[])"(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createInCollection(
      _merkleRoot: PromiseOrValue<BytesLike>,
      _token: PromiseOrValue<string>,
      _plugins: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _calls: InitInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fNFTImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nextId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uri(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultToToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
